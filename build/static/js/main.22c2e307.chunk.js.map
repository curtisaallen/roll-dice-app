{"version":3,"sources":["components/RollDice.js","components/Die.js","components/DiceContainer.js","App.js","serviceWorker.js","index.js"],"names":["RollDice","props","react_default","a","createElement","className","disabled","onClick","handleRoll","Die","concat","shake","num","DiceContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRandomDice","Math","floor","random","state","dice","length","setState","i","setInterval","diceone","dicetwo","setTimeout","clearInterval","_this2","components_Die","components_RollDice","React","Component","App","components_DiceContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAYeA,EAVE,SAAAC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQE,SAAUL,EAAMK,SAAUC,QAASN,EAAMO,YAC/CP,EAAMK,SAAY,aAAiB,gBCI5BG,EARH,SAAAR,GACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,qBAAAK,OAAuBT,EAAMU,MAAN,WAAvB,cACbT,EAAAC,EAAAC,cAAA,KAAGC,UAAS,eAAAK,OAAiBT,EAAMW,SC2CzBC,cA3Cb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KASZoB,iBAAmB,WAEjB,OADUC,KAAKC,MAAMD,KAAKE,SAAWV,EAAKW,MAAMC,KAAKC,SAXpCb,EAcnBN,WAAa,WACXM,EAAKc,SAAS,CACVjB,OAAO,EACPL,UAAU,IAEd,IAAIuB,EAAIC,YAAY,WAChBhB,EAAKc,SAAS,CACVjB,OAAO,EACPL,UAAU,EACVyB,QAASjB,EAAKO,mBACdW,QAASlB,EAAKO,sBAGrB,KACDY,WAAW,WAAcC,cAAeL,IAAQ,MA1B5Cf,EAAKW,MAAQ,CACTC,KAAM,CAAC,MAAM,MAAM,QAAQ,OAAO,QAClCf,OAAO,EACPoB,QAAS,EACTC,QAAS,EACT1B,UAAU,GAPDQ,wEA8BV,IAAAqB,EAAAlB,KACT,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACgC,EAAD,CAAMzB,MAAOM,KAAKQ,MAAMd,MAAOC,IAAKK,KAAKQ,MAAMC,KAAKT,KAAKQ,MAAMM,WAC/D7B,EAAAC,EAAAC,cAACgC,EAAD,CAAMzB,MAAOM,KAAKQ,MAAMd,MAAOC,IAAKK,KAAKQ,MAAMC,KAAKT,KAAKQ,MAAMO,YAEnE9B,EAAAC,EAAAC,cAACiC,EAAD,CAAU/B,SAAUW,KAAKQ,MAAMnB,SAAUE,WAAY,kBAAM2B,EAAK3B,wBAtC5C8B,IAAMC,WCOnBC,MARf,WACE,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22c2e307.chunk.js","sourcesContent":["import React from 'react';\n\nconst RollDice = props => {\n  return (\n    <div className=\"btnwrap\">\n      <button disabled={props.disabled} onClick={props.handleRoll}>\n       {props.disabled ? (\"Rolling...\") : (\"Roll Dice!\")}\n      </button>\n    </div>\n  );\n}\n\nexport default RollDice;","import React from 'react';\n\nconst Die = props => {\n  return (\n    <div className={`animated infinite ${props.shake ? `shake` : ``} delay-1s`}>\n     <i className={`fas fa-dice-${props.num}`}></i>\n    </div>\n  )\n}\n\nexport default Die;","import React from 'react';\nimport RollDice from './RollDice';\nimport Dice from './Die';\n\nclass DiceContainer extends React.Component {\n  constructor(props) {\n        super(props);\n        this.state = { \n            dice: ['one','two','three','four','five'],\n            shake: false,\n            diceone: 0,\n            dicetwo: 4,\n            disabled: false\n        };\n  }\n  handleRandomDice = () => {\n    let num = Math.floor(Math.random() * this.state.dice.length); \n    return num;\n  }\n  handleRoll = () => {\n    this.setState({\n        shake: true,\n        disabled: true\n    });\n    let i = setInterval(() => {\n        this.setState({\n            shake: false,\n            disabled: false,\n            diceone: this.handleRandomDice(),\n            dicetwo: this.handleRandomDice()\n        });\n        }\n    ,3000);\n    setTimeout(function( ) { clearInterval( i ); }, 5000);\n  }\n  render() {      \n  return (\n    <div className=\"App\">\n        <div className=\"wrap\">\n            <Dice shake={this.state.shake} num={this.state.dice[this.state.diceone]} />\n            <Dice shake={this.state.shake} num={this.state.dice[this.state.dicetwo]} />\n        </div>\n        <RollDice disabled={this.state.disabled} handleRoll={() => this.handleRoll()} />\n    </div>\n  )\n  }\n}\n\nexport default DiceContainer;\n","import React from 'react';\nimport DiceContainer from './components/DiceContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DiceContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}